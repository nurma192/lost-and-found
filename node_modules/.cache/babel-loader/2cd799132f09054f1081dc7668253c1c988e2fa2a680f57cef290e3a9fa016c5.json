{"ast":null,"code":"export var ErrorKind;\n(function (ErrorKind) {\n  /** Argument is unclosed (e.g. `{0`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_CLOSING_BRACE\"] = 1] = \"EXPECT_ARGUMENT_CLOSING_BRACE\";\n  /** Argument is empty (e.g. `{}`). */\n  ErrorKind[ErrorKind[\"EMPTY_ARGUMENT\"] = 2] = \"EMPTY_ARGUMENT\";\n  /** Argument is malformed (e.g. `{foo!}``) */\n  ErrorKind[ErrorKind[\"MALFORMED_ARGUMENT\"] = 3] = \"MALFORMED_ARGUMENT\";\n  /** Expect an argument type (e.g. `{foo,}`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_TYPE\"] = 4] = \"EXPECT_ARGUMENT_TYPE\";\n  /** Unsupported argument type (e.g. `{foo,foo}`) */\n  ErrorKind[ErrorKind[\"INVALID_ARGUMENT_TYPE\"] = 5] = \"INVALID_ARGUMENT_TYPE\";\n  /** Expect an argument style (e.g. `{foo, number, }`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_STYLE\"] = 6] = \"EXPECT_ARGUMENT_STYLE\";\n  /** The number skeleton is invalid. */\n  ErrorKind[ErrorKind[\"INVALID_NUMBER_SKELETON\"] = 7] = \"INVALID_NUMBER_SKELETON\";\n  /** The date time skeleton is invalid. */\n  ErrorKind[ErrorKind[\"INVALID_DATE_TIME_SKELETON\"] = 8] = \"INVALID_DATE_TIME_SKELETON\";\n  /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */\n  ErrorKind[ErrorKind[\"EXPECT_NUMBER_SKELETON\"] = 9] = \"EXPECT_NUMBER_SKELETON\";\n  /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */\n  ErrorKind[ErrorKind[\"EXPECT_DATE_TIME_SKELETON\"] = 10] = \"EXPECT_DATE_TIME_SKELETON\";\n  /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */\n  ErrorKind[ErrorKind[\"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\"] = 11] = \"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\";\n  /** Missing select argument options (e.g. `{foo, select}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_OPTIONS\"] = 12] = \"EXPECT_SELECT_ARGUMENT_OPTIONS\";\n  /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 13] = \"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\";\n  /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */\n  ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 14] = \"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\";\n  /** Expecting a selector in `select` argument (e.g `{foo, select}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR\"] = 15] = \"EXPECT_SELECT_ARGUMENT_SELECTOR\";\n  /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR\"] = 16] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR\";\n  /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\"] = 17] = \"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\";\n  /**\n   * Expecting a message fragment after the `plural` or `selectordinal` selector\n   * (e.g. `{foo, plural, one}`)\n   */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\"] = 18] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\";\n  /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */\n  ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_SELECTOR\"] = 19] = \"INVALID_PLURAL_ARGUMENT_SELECTOR\";\n  /**\n   * Duplicate selectors in `plural` or `selectordinal` argument.\n   * (e.g. {foo, plural, one {#} one {#}})\n   */\n  ErrorKind[ErrorKind[\"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\"] = 20] = \"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\";\n  /** Duplicate selectors in `select` argument.\n   * (e.g. {foo, select, apple {apple} apple {apple}})\n   */\n  ErrorKind[ErrorKind[\"DUPLICATE_SELECT_ARGUMENT_SELECTOR\"] = 21] = \"DUPLICATE_SELECT_ARGUMENT_SELECTOR\";\n  /** Plural or select argument option must have `other` clause. */\n  ErrorKind[ErrorKind[\"MISSING_OTHER_CLAUSE\"] = 22] = \"MISSING_OTHER_CLAUSE\";\n  /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */\n  ErrorKind[ErrorKind[\"INVALID_TAG\"] = 23] = \"INVALID_TAG\";\n  /** The tag name is invalid. (e.g. `<123>foo</123>`) */\n  ErrorKind[ErrorKind[\"INVALID_TAG_NAME\"] = 25] = \"INVALID_TAG_NAME\";\n  /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */\n  ErrorKind[ErrorKind[\"UNMATCHED_CLOSING_TAG\"] = 26] = \"UNMATCHED_CLOSING_TAG\";\n  /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */\n  ErrorKind[ErrorKind[\"UNCLOSED_TAG\"] = 27] = \"UNCLOSED_TAG\";\n})(ErrorKind || (ErrorKind = {}));","map":{"version":3,"names":["ErrorKind"],"sources":["../error.ts"],"sourcesContent":[null],"mappings":"AAQA,WAAYA,SAoEX;AApED,WAAYA,SAAS;EACnB;EACAA,SAAA,CAAAA,SAAA,wEAAiC;EACjC;EACAA,SAAA,CAAAA,SAAA,0CAAkB;EAClB;EACAA,SAAA,CAAAA,SAAA,kDAAsB;EACtB;EACAA,SAAA,CAAAA,SAAA,sDAAwB;EACxB;EACAA,SAAA,CAAAA,SAAA,wDAAyB;EACzB;EACAA,SAAA,CAAAA,SAAA,wDAAyB;EACzB;EACAA,SAAA,CAAAA,SAAA,4DAA2B;EAC3B;EACAA,SAAA,CAAAA,SAAA,kEAA8B;EAC9B;EACAA,SAAA,CAAAA,SAAA,0DAA0B;EAC1B;EACAA,SAAA,CAAAA,SAAA,iEAA8B;EAC9B;EACAA,SAAA,CAAAA,SAAA,+EAAqC;EACrC;EACAA,SAAA,CAAAA,SAAA,2EAAmC;EAEnC;EACAA,SAAA,CAAAA,SAAA,qFAAwC;EACxC;EACAA,SAAA,CAAAA,SAAA,uFAAyC;EAEzC;EACAA,SAAA,CAAAA,SAAA,6EAAoC;EACpC;EACAA,SAAA,CAAAA,SAAA,6EAAoC;EAEpC;EACAA,SAAA,CAAAA,SAAA,+FAA6C;EAC7C;;;;EAIAA,SAAA,CAAAA,SAAA,+FAA6C;EAE7C;EACAA,SAAA,CAAAA,SAAA,+EAAqC;EAErC;;;;EAIAA,SAAA,CAAAA,SAAA,mFAAuC;EACvC;;;EAGAA,SAAA,CAAAA,SAAA,mFAAuC;EAEvC;EACAA,SAAA,CAAAA,SAAA,uDAAyB;EAEzB;EACAA,SAAA,CAAAA,SAAA,qCAAgB;EAChB;EACAA,SAAA,CAAAA,SAAA,+CAAqB;EACrB;EACAA,SAAA,CAAAA,SAAA,yDAA0B;EAC1B;EACAA,SAAA,CAAAA,SAAA,uCAAiB;AACnB,CAAC,EApEWA,SAAS,KAATA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}