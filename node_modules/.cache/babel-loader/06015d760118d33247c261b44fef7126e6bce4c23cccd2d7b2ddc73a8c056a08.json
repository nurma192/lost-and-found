{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { WHITE_SPACE_REGEX } from './regex.generated';\nexport function parseNumberSkeletonFromString(skeleton) {\n  if (skeleton.length === 0) {\n    throw new Error('Number skeleton cannot be empty');\n  }\n  // Parse the skeleton\n  var stringTokens = skeleton.split(WHITE_SPACE_REGEX).filter(function (x) {\n    return x.length > 0;\n  });\n  var tokens = [];\n  for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n    var stringToken = stringTokens_1[_i];\n    var stemAndOptions = stringToken.split('/');\n    if (stemAndOptions.length === 0) {\n      throw new Error('Invalid number skeleton');\n    }\n    var stem = stemAndOptions[0],\n      options = stemAndOptions.slice(1);\n    for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n      var option = options_1[_a];\n      if (option.length === 0) {\n        throw new Error('Invalid number skeleton');\n      }\n    }\n    tokens.push({\n      stem: stem,\n      options: options\n    });\n  }\n  return tokens;\n}\nfunction icuUnitToEcma(unit) {\n  return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?[rs]?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n  var result = {};\n  if (str[str.length - 1] === 'r') {\n    result.roundingPriority = 'morePrecision';\n  } else if (str[str.length - 1] === 's') {\n    result.roundingPriority = 'lessPrecision';\n  }\n  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n    // @@@ case\n    if (typeof g2 !== 'string') {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length;\n    }\n    // @@@+ case\n    else if (g2 === '+') {\n      result.minimumSignificantDigits = g1.length;\n    }\n    // .### case\n    else if (g1[0] === '#') {\n      result.maximumSignificantDigits = g1.length;\n    }\n    // .@@## or .@@@ case\n    else {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n    }\n    return '';\n  });\n  return result;\n}\nfunction parseSign(str) {\n  switch (str) {\n    case 'sign-auto':\n      return {\n        signDisplay: 'auto'\n      };\n    case 'sign-accounting':\n    case '()':\n      return {\n        currencySign: 'accounting'\n      };\n    case 'sign-always':\n    case '+!':\n      return {\n        signDisplay: 'always'\n      };\n    case 'sign-accounting-always':\n    case '()!':\n      return {\n        signDisplay: 'always',\n        currencySign: 'accounting'\n      };\n    case 'sign-except-zero':\n    case '+?':\n      return {\n        signDisplay: 'exceptZero'\n      };\n    case 'sign-accounting-except-zero':\n    case '()?':\n      return {\n        signDisplay: 'exceptZero',\n        currencySign: 'accounting'\n      };\n    case 'sign-never':\n    case '+_':\n      return {\n        signDisplay: 'never'\n      };\n  }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n  // Engineering\n  var result;\n  if (stem[0] === 'E' && stem[1] === 'E') {\n    result = {\n      notation: 'engineering'\n    };\n    stem = stem.slice(2);\n  } else if (stem[0] === 'E') {\n    result = {\n      notation: 'scientific'\n    };\n    stem = stem.slice(1);\n  }\n  if (result) {\n    var signDisplay = stem.slice(0, 2);\n    if (signDisplay === '+!') {\n      result.signDisplay = 'always';\n      stem = stem.slice(2);\n    } else if (signDisplay === '+?') {\n      result.signDisplay = 'exceptZero';\n      stem = stem.slice(2);\n    }\n    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n      throw new Error('Malformed concise eng/scientific notation');\n    }\n    result.minimumIntegerDigits = stem.length;\n  }\n  return result;\n}\nfunction parseNotationOptions(opt) {\n  var result = {};\n  var signOpts = parseSign(opt);\n  if (signOpts) {\n    return signOpts;\n  }\n  return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nexport function parseNumberSkeleton(tokens) {\n  var result = {};\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    switch (token.stem) {\n      case 'percent':\n      case '%':\n        result.style = 'percent';\n        continue;\n      case '%x100':\n        result.style = 'percent';\n        result.scale = 100;\n        continue;\n      case 'currency':\n        result.style = 'currency';\n        result.currency = token.options[0];\n        continue;\n      case 'group-off':\n      case ',_':\n        result.useGrouping = false;\n        continue;\n      case 'precision-integer':\n      case '.':\n        result.maximumFractionDigits = 0;\n        continue;\n      case 'measure-unit':\n      case 'unit':\n        result.style = 'unit';\n        result.unit = icuUnitToEcma(token.options[0]);\n        continue;\n      case 'compact-short':\n      case 'K':\n        result.notation = 'compact';\n        result.compactDisplay = 'short';\n        continue;\n      case 'compact-long':\n      case 'KK':\n        result.notation = 'compact';\n        result.compactDisplay = 'long';\n        continue;\n      case 'scientific':\n        result = __assign(__assign(__assign({}, result), {\n          notation: 'scientific'\n        }), token.options.reduce(function (all, opt) {\n          return __assign(__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'engineering':\n        result = __assign(__assign(__assign({}, result), {\n          notation: 'engineering'\n        }), token.options.reduce(function (all, opt) {\n          return __assign(__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'notation-simple':\n        result.notation = 'standard';\n        continue;\n      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n      case 'unit-width-narrow':\n        result.currencyDisplay = 'narrowSymbol';\n        result.unitDisplay = 'narrow';\n        continue;\n      case 'unit-width-short':\n        result.currencyDisplay = 'code';\n        result.unitDisplay = 'short';\n        continue;\n      case 'unit-width-full-name':\n        result.currencyDisplay = 'name';\n        result.unitDisplay = 'long';\n        continue;\n      case 'unit-width-iso-code':\n        result.currencyDisplay = 'symbol';\n        continue;\n      case 'scale':\n        result.scale = parseFloat(token.options[0]);\n        continue;\n      case 'rounding-mode-floor':\n        result.roundingMode = 'floor';\n        continue;\n      case 'rounding-mode-ceiling':\n        result.roundingMode = 'ceil';\n        continue;\n      case 'rounding-mode-down':\n        result.roundingMode = 'trunc';\n        continue;\n      case 'rounding-mode-up':\n        result.roundingMode = 'expand';\n        continue;\n      case 'rounding-mode-half-even':\n        result.roundingMode = 'halfEven';\n        continue;\n      case 'rounding-mode-half-down':\n        result.roundingMode = 'halfTrunc';\n        continue;\n      case 'rounding-mode-half-up':\n        result.roundingMode = 'halfExpand';\n        continue;\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n      case 'integer-width':\n        if (token.options.length > 1) {\n          throw new RangeError('integer-width stems only accept a single optional option');\n        }\n        token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n          if (g1) {\n            result.minimumIntegerDigits = g2.length;\n          } else if (g3 && g4) {\n            throw new Error('We currently do not support maximum integer digits');\n          } else if (g5) {\n            throw new Error('We currently do not support exact integer digits');\n          }\n          return '';\n        });\n        continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n      result.minimumIntegerDigits = token.stem.length;\n      continue;\n    }\n    if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n      // Precision\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n      // precision-integer case\n      if (token.options.length > 1) {\n        throw new RangeError('Fraction-precision stems only accept a single optional option');\n      }\n      token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n        // .000* case (before ICU67 it was .000+)\n        if (g2 === '*') {\n          result.minimumFractionDigits = g1.length;\n        }\n        // .### case\n        else if (g3 && g3[0] === '#') {\n          result.maximumFractionDigits = g3.length;\n        }\n        // .00## case\n        else if (g4 && g5) {\n          result.minimumFractionDigits = g4.length;\n          result.maximumFractionDigits = g4.length + g5.length;\n        } else {\n          result.minimumFractionDigits = g1.length;\n          result.maximumFractionDigits = g1.length;\n        }\n        return '';\n      });\n      var opt = token.options[0];\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display\n      if (opt === 'w') {\n        result = __assign(__assign({}, result), {\n          trailingZeroDisplay: 'stripIfInteger'\n        });\n      } else if (opt) {\n        result = __assign(__assign({}, result), parseSignificantPrecision(opt));\n      }\n      continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n      result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\n      continue;\n    }\n    var signOpts = parseSign(token.stem);\n    if (signOpts) {\n      result = __assign(__assign({}, result), signOpts);\n    }\n    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n    if (conciseScientificAndEngineeringOpts) {\n      result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["WHITE_SPACE_REGEX","parseNumberSkeletonFromString","skeleton","length","Error","stringTokens","split","filter","x","tokens","_i","stringTokens_1","stringToken","stemAndOptions","stem","options","slice","_a","options_1","option","push","icuUnitToEcma","unit","replace","FRACTION_PRECISION_REGEX","SIGNIFICANT_PRECISION_REGEX","INTEGER_WIDTH_REGEX","CONCISE_INTEGER_WIDTH_REGEX","parseSignificantPrecision","str","result","roundingPriority","_","g1","g2","minimumSignificantDigits","maximumSignificantDigits","parseSign","signDisplay","currencySign","parseConciseScientificAndEngineeringStem","notation","test","minimumIntegerDigits","parseNotationOptions","opt","signOpts","parseNumberSkeleton","tokens_1","token","style","scale","currency","useGrouping","maximumFractionDigits","compactDisplay","__assign","reduce","all","currencyDisplay","unitDisplay","parseFloat","roundingMode","RangeError","g3","g4","g5","minimumFractionDigits","trailingZeroDisplay","conciseScientificAndEngineeringOpts"],"sources":["../number.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}